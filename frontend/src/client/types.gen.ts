// This file is auto-generated by @hey-api/openapi-ts

/**
 * AudioFormat
 */
export type AudioFormat = {
    /**
     * Out Type
     */
    out_type?: 'gsm' | 'wav' | 'ogg' | 'mp3' | 'flac';
    /**
     * Samplerate
     */
    samplerate?: number;
    /**
     * Channels
     */
    channels?: number;
    /**
     * Bitdepth
     */
    bitdepth?: number;
};

/**
 * BaseDialplanApp
 * This is a baseclass for dialplan apps
 */
export type BaseDialplanApp = {
    /**
     * App
     */
    readonly app: string;
};

/**
 * Body_create_media_api_v1_media__post
 */
export type BodyCreateMediaApiV1MediaPost = {
    /**
     * File
     */
    file: Blob | File;
};

/**
 * Credentials
 */
export type Credentials = {
    /**
     * Username
     */
    username: string;
    /**
     * Password
     */
    password: string;
};

/**
 * Dialplan
 */
export type Dialplan = {
    /**
     * Exten
     */
    exten: string;
    /**
     * Context
     */
    context: string;
    /**
     * Entries
     */
    entries?: {
        [key: string]: BaseDialplanApp;
    };
};

/**
 * Extension
 */
export type Extension = {
    /**
     * Extension
     */
    extension: string;
    /**
     * Name
     */
    name: string;
    /**
     * Location Name
     */
    location_name?: string | null;
    /**
     * Lat
     */
    lat?: number | null;
    /**
     * Lon
     */
    lon?: number | null;
    /**
     * Public
     */
    public?: boolean;
    /**
     * Type
     */
    type: string;
    /**
     * Token
     */
    token: string;
    /**
     * Password
     */
    password: string;
    /**
     * Info
     */
    info: string;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Extra Fields
     */
    extra_fields?: {
        [key: string]: unknown;
    };
    /**
     * Created By
     */
    readonly created_by: string;
    /**
     * Media
     */
    readonly media: Array<ExtensionMedia>;
};

/**
 * ExtensionBase
 */
export type ExtensionBase = {
    /**
     * Extension
     */
    extension: string;
    /**
     * Name
     */
    name: string;
    /**
     * Location Name
     */
    location_name?: string | null;
    /**
     * Lat
     */
    lat?: number | null;
    /**
     * Lon
     */
    lon?: number | null;
    /**
     * Public
     */
    public?: boolean;
    /**
     * Type
     */
    type: string;
};

/**
 * ExtensionCreate
 */
export type ExtensionCreate = {
    /**
     * Extension
     */
    extension: string;
    /**
     * Name
     */
    name: string;
    /**
     * Info
     */
    info: string;
    /**
     * Public
     */
    public?: boolean;
    /**
     * Type
     */
    type: string;
    /**
     * Extra Fields
     */
    extra_fields?: {
        [key: string]: unknown;
    };
    /**
     * Location Name
     */
    location_name?: string | null;
    /**
     * Lat
     */
    lat?: number | null;
    /**
     * Lon
     */
    lon?: number | null;
    /**
     * Media
     */
    media?: {
        [key: string]: string;
    };
};

/**
 * ExtensionMedia
 */
export type ExtensionMedia = {
    /**
     * Id
     */
    id?: string;
    /**
     * Name
     */
    name: string;
    /**
     * Media Id
     */
    media_id?: string | null;
    /**
     * Extension Id
     */
    extension_id?: string | null;
};

/**
 * ExtensionUpdate
 */
export type ExtensionUpdate = {
    /**
     * Name
     */
    name?: string | null;
    /**
     * Info
     */
    info?: string | null;
    /**
     * Public
     */
    public?: boolean | null;
    /**
     * Location Name
     */
    location_name?: string | null;
    /**
     * Lat
     */
    lat?: number | null;
    /**
     * Lon
     */
    lon?: number | null;
    /**
     * Extra Fields
     */
    extra_fields?: {
        [key: string]: unknown;
    };
    /**
     * Media
     */
    media?: {
        [key: string]: string;
    };
};

/**
 * HTTPValidationError
 */
export type HttpValidationError = {
    /**
     * Detail
     */
    detail?: Array<ValidationError>;
};

/**
 * ImageFormat
 */
export type ImageFormat = {
    /**
     * Out Type
     */
    out_type?: 'avif' | 'bmp' | 'gif' | 'jpeg' | 'png' | 'tiff' | 'webp';
    /**
     * Colormode
     */
    colormode?: '1' | 'L' | 'RGB';
    /**
     * Width
     */
    width?: number | null;
    /**
     * Height
     */
    height?: number | null;
};

/**
 * IncomingPeeringRequest
 */
export type IncomingPeeringRequest = {
    /**
     * Id
     */
    id?: string;
    /**
     * Name
     */
    name: string;
    /**
     * Codec
     */
    codec?: 'g722' | 'alaw' | 'ulaw' | 'g726' | 'gsm' | 'lpc10';
    /**
     * Partner Uuru Host
     */
    partner_uuru_host: string;
    /**
     * Partner Iax Host
     */
    partner_iax_host: string;
    /**
     * Partner Extension Length
     */
    partner_extension_length: number;
    /**
     * Secret
     */
    secret: string;
};

/**
 * IncomingPeeringRequestBase
 */
export type IncomingPeeringRequestBase = {
    /**
     * Id
     */
    id?: string;
    /**
     * Name
     */
    name: string;
    /**
     * Codec
     */
    codec?: 'g722' | 'alaw' | 'ulaw' | 'g726' | 'gsm' | 'lpc10';
    /**
     * Partner Uuru Host
     */
    partner_uuru_host: string;
    /**
     * Partner Iax Host
     */
    partner_iax_host: string;
    /**
     * Partner Extension Length
     */
    partner_extension_length: number;
};

/**
 * IncomingRequestStatus
 */
export type IncomingRequestStatus = {
    /**
     * Accept
     */
    accept: boolean;
    /**
     * Prefix
     */
    prefix?: string | null;
    /**
     * Local Only
     */
    local_only?: boolean;
};

/**
 * Invite
 */
export type Invite = {
    /**
     * Id
     */
    id?: string;
    /**
     * Invite
     */
    invite: string;
    variant?: InviteVariant;
    /**
     * Use Count
     */
    use_count?: number | null;
    /**
     * Max Uses
     */
    max_uses?: number | null;
    /**
     * Valid Until
     */
    valid_until?: string | null;
};

/**
 * InviteCreate
 */
export type InviteCreate = {
    variant: InviteVariant;
    /**
     * Max Uses
     */
    max_uses?: number | null;
    /**
     * Valid Days
     */
    valid_days?: number | null;
    /**
     * Valid Hours
     */
    valid_hours?: number | null;
};

/**
 * InviteVariant
 */
export type InviteVariant = 'count' | 'time' | 'time+count';

/**
 * Media
 */
export type Media = {
    /**
     * Id
     */
    id?: string;
    /**
     * Name
     */
    name: string;
    type: MediaType;
    /**
     * Created By Id
     */
    created_by_id?: string | null;
    /**
     * Uploaded At
     */
    uploaded_at?: string;
    /**
     * Stored As
     */
    stored_as: string;
};

/**
 * MediaDescriptor
 */
export type MediaDescriptor = {
    media_type: MediaType;
    /**
     * Required
     */
    required: boolean;
    /**
     * Label
     */
    label: string;
    /**
     * Out Format
     */
    out_format: ImageFormat | AudioFormat | null;
    /**
     * Endpoint Filename
     */
    endpoint_filename?: string | null;
};

/**
 * MediaType
 */
export type MediaType = 'image' | 'audio' | 'raw';

/**
 * MediaUpdateMeta
 */
export type MediaUpdateMeta = {
    /**
     * Name
     */
    name: string;
};

/**
 * OutgoingPeeringRequestBase
 */
export type OutgoingPeeringRequestBase = {
    /**
     * Name
     */
    name: string;
    /**
     * Partner Uuru Host
     */
    partner_uuru_host: string;
    /**
     * Prefix
     */
    prefix: string;
    /**
     * Codec
     */
    codec?: 'g722' | 'alaw' | 'ulaw' | 'g726' | 'gsm' | 'lpc10';
};

/**
 * OutgoingPeeringRequestPublic
 */
export type OutgoingPeeringRequestPublic = {
    /**
     * Name
     */
    name: string;
    /**
     * Partner Uuru Host
     */
    partner_uuru_host: string;
    /**
     * Prefix
     */
    prefix: string;
    /**
     * Codec
     */
    codec?: 'g722' | 'alaw' | 'ulaw' | 'g726' | 'gsm' | 'lpc10';
    /**
     * Id
     */
    id?: string;
};

/**
 * OutgoingRequestStatus
 */
export type OutgoingRequestStatus = {
    /**
     * Accept
     */
    accept: boolean;
    /**
     * Secret
     */
    secret: string;
    /**
     * Extension Length
     */
    extension_length?: number | null;
    /**
     * Partner Iax Host
     */
    partner_iax_host?: string | null;
    /**
     * Partner Uuru Host
     */
    partner_uuru_host?: string | null;
};

/**
 * PSContact
 */
export type PsContact = {
    /**
     * Id
     */
    id: string;
    /**
     * Uri
     */
    uri: string;
    /**
     * Expiration Time
     */
    expiration_time: number;
    /**
     * User Agent
     */
    user_agent: string;
    /**
     * Via Addr
     */
    via_addr: string;
    /**
     * Via Port
     */
    via_port: number;
    /**
     * Endpoint
     */
    endpoint: string;
};

/**
 * PasswordChange
 */
export type PasswordChange = {
    /**
     * Current Password
     */
    current_password: string;
    /**
     * New Password
     */
    new_password: string;
};

/**
 * PeerBase
 */
export type PeerBase = {
    /**
     * Id
     */
    id?: string;
    /**
     * Name
     */
    name: string;
    /**
     * Codec
     */
    codec?: 'g722' | 'alaw' | 'ulaw' | 'g726' | 'gsm' | 'lpc10';
    /**
     * Prefix
     */
    prefix: string;
    /**
     * Partner Extension Length
     */
    partner_extension_length: number;
    /**
     * Partner Iax Host
     */
    partner_iax_host: string;
    /**
     * Partner Uuru Host
     */
    partner_uuru_host: string;
};

/**
 * PeerPhonebook
 */
export type PeerPhonebook = {
    peer: PeerBase;
    /**
     * Phonebook
     */
    phonebook: Array<ExtensionBase>;
};

/**
 * PeerTeardownData
 */
export type PeerTeardownData = {
    /**
     * Name
     */
    name: string;
    /**
     * Secret
     */
    secret: string;
};

/**
 * PhoneType
 */
export type PhoneType = {
    /**
     * Schema
     */
    schema?: {
        [key: string]: unknown;
    } | null;
    /**
     * Display Index
     */
    display_index: number;
    /**
     * Name
     */
    name: string;
    /**
     * Max Extension Name Chars
     */
    max_extension_name_chars: number;
    /**
     * Media
     */
    media: {
        [key: string]: MediaDescriptor;
    };
};

/**
 * PublicSettings
 */
export type PublicSettings = {
    /**
     * Web Host
     */
    WEB_HOST: string;
    /**
     * Asterisk Host
     */
    ASTERISK_HOST: string;
    /**
     * Ldap Server
     */
    LDAP_SERVER: string;
    /**
     * Extension Digits
     */
    EXTENSION_DIGITS: number;
    /**
     * Reserved Extensions
     */
    RESERVED_EXTENSIONS: Array<number | [
        number,
        number
    ]>;
    /**
     * Reserved Name Prefixes
     */
    RESERVED_NAME_PREFIXES: Array<string>;
    /**
     * Site Name
     */
    SITE_NAME: string;
    /**
     * Site Slogan
     */
    SITE_SLOGAN: string;
    /**
     * Show Site Slogan
     */
    SHOW_SITE_SLOGAN: boolean;
    /**
     * Site Lat
     */
    SITE_LAT: number;
    /**
     * Site Lon
     */
    SITE_LON: number;
    /**
     * Enable Pages
     */
    ENABLE_PAGES: boolean;
    /**
     * Pages Title
     */
    PAGES_TITLE: string;
    /**
     * Limit Registration
     */
    LIMIT_REGISTRATION: boolean;
    /**
     * Enable Websip
     */
    ENABLE_WEBSIP: boolean;
    /**
     * Websip Public
     */
    WEBSIP_PUBLIC: boolean;
    /**
     * Websip Extension Range
     */
    WEBSIP_EXTENSION_RANGE: [
        number,
        number
    ];
    /**
     * Websip Ws Host
     */
    WEBSIP_WS_HOST: string;
    /**
     * Federation Iax2 Host
     */
    FEDERATION_IAX2_HOST: string;
    /**
     * Federation Uuru Host
     */
    FEDERATION_UURU_HOST: string;
    /**
     * Media Max Size User
     */
    MEDIA_MAX_SIZE_USER: number;
    /**
     * Media Limit Size Admin
     */
    MEDIA_LIMIT_SIZE_ADMIN: boolean;
    /**
     * Media Allow Raw
     */
    MEDIA_ALLOW_RAW: boolean;
};

/**
 * Token
 */
export type Token = {
    /**
     * Token
     */
    token: string;
};

/**
 * UserCreate
 */
export type UserCreate = {
    /**
     * Username
     */
    username: string;
    role?: UserRole;
    /**
     * Password
     */
    password: string;
    /**
     * Invite
     */
    invite?: string | null;
};

/**
 * UserPublic
 */
export type UserPublic = {
    /**
     * Username
     */
    username: string;
    role?: UserRole;
    /**
     * Id
     */
    id: string;
};

/**
 * UserRole
 */
export type UserRole = 'admin' | 'user';

/**
 * UserUpdate
 */
export type UserUpdate = {
    /**
     * Username
     */
    username?: string | null;
    /**
     * Password
     */
    password?: string | null;
    role?: UserRole | null;
};

/**
 * ValidationError
 */
export type ValidationError = {
    /**
     * Location
     */
    loc: Array<string | number>;
    /**
     * Message
     */
    msg: string;
    /**
     * Error Type
     */
    type: string;
};

/**
 * WebSIPExtension
 */
export type WebSipExtension = {
    /**
     * Aor
     */
    aor: string;
    /**
     * Extension
     */
    extension: string;
    /**
     * Auth User
     */
    auth_user: string;
    /**
     * Auth Pass
     */
    auth_pass: string;
    /**
     * Display Name
     */
    display_name: string;
    /**
     * Last Seen
     */
    last_seen: string;
};

export type LoginApiV1UserLoginPostData = {
    body: Credentials;
    path?: never;
    query?: never;
    url: '/api/v1/user/login';
};

export type LoginApiV1UserLoginPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type LoginApiV1UserLoginPostError = LoginApiV1UserLoginPostErrors[keyof LoginApiV1UserLoginPostErrors];

export type LoginApiV1UserLoginPostResponses = {
    /**
     * Successful Response
     */
    200: Token;
};

export type LoginApiV1UserLoginPostResponse = LoginApiV1UserLoginPostResponses[keyof LoginApiV1UserLoginPostResponses];

export type LogoutApiV1UserLogoutGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/user/logout';
};

export type LogoutApiV1UserLogoutGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type DeleteApiV1UserDeleteData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * User Id
         */
        user_id?: string | null;
    };
    url: '/api/v1/user/';
};

export type DeleteApiV1UserDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteApiV1UserDeleteError = DeleteApiV1UserDeleteErrors[keyof DeleteApiV1UserDeleteErrors];

export type DeleteApiV1UserDeleteResponses = {
    /**
     * Successful Response
     */
    204: void;
};

export type DeleteApiV1UserDeleteResponse = DeleteApiV1UserDeleteResponses[keyof DeleteApiV1UserDeleteResponses];

export type InfoApiV1UserGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * User Id
         */
        user_id?: string | null;
    };
    url: '/api/v1/user/';
};

export type InfoApiV1UserGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type InfoApiV1UserGetError = InfoApiV1UserGetErrors[keyof InfoApiV1UserGetErrors];

export type InfoApiV1UserGetResponses = {
    /**
     * Successful Response
     */
    200: UserPublic;
};

export type InfoApiV1UserGetResponse = InfoApiV1UserGetResponses[keyof InfoApiV1UserGetResponses];

export type UpdateApiV1UserPatchData = {
    body: UserUpdate;
    path?: never;
    query?: {
        /**
         * User Id
         */
        user_id?: string | null;
    };
    url: '/api/v1/user/';
};

export type UpdateApiV1UserPatchErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateApiV1UserPatchError = UpdateApiV1UserPatchErrors[keyof UpdateApiV1UserPatchErrors];

export type UpdateApiV1UserPatchResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type RegisterApiV1UserRegisterPostData = {
    body: UserCreate;
    path?: never;
    query?: never;
    url: '/api/v1/user/register';
};

export type RegisterApiV1UserRegisterPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RegisterApiV1UserRegisterPostError = RegisterApiV1UserRegisterPostErrors[keyof RegisterApiV1UserRegisterPostErrors];

export type RegisterApiV1UserRegisterPostResponses = {
    /**
     * Successful Response
     */
    201: UserPublic;
};

export type RegisterApiV1UserRegisterPostResponse = RegisterApiV1UserRegisterPostResponses[keyof RegisterApiV1UserRegisterPostResponses];

export type ChangePasswordApiV1UserPasswordPatchData = {
    body: PasswordChange;
    path?: never;
    query?: never;
    url: '/api/v1/user/password';
};

export type ChangePasswordApiV1UserPasswordPatchErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ChangePasswordApiV1UserPasswordPatchError = ChangePasswordApiV1UserPasswordPatchErrors[keyof ChangePasswordApiV1UserPasswordPatchErrors];

export type ChangePasswordApiV1UserPasswordPatchResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type AllUsersApiV1UserAllGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/user/all';
};

export type AllUsersApiV1UserAllGetResponses = {
    /**
     * Response All Users Api V1 User All Get
     * Successful Response
     */
    200: Array<UserPublic>;
};

export type AllUsersApiV1UserAllGetResponse = AllUsersApiV1UserAllGetResponses[keyof AllUsersApiV1UserAllGetResponses];

export type DeleteInviteApiV1UserInviteDeleteData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Invite
         */
        invite: string;
    };
    url: '/api/v1/user/invite';
};

export type DeleteInviteApiV1UserInviteDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteInviteApiV1UserInviteDeleteError = DeleteInviteApiV1UserInviteDeleteErrors[keyof DeleteInviteApiV1UserInviteDeleteErrors];

export type DeleteInviteApiV1UserInviteDeleteResponses = {
    /**
     * Successful Response
     */
    204: void;
};

export type DeleteInviteApiV1UserInviteDeleteResponse = DeleteInviteApiV1UserInviteDeleteResponses[keyof DeleteInviteApiV1UserInviteDeleteResponses];

export type GetInvitesApiV1UserInviteGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/user/invite';
};

export type GetInvitesApiV1UserInviteGetResponses = {
    /**
     * Response Get Invites Api V1 User Invite Get
     * Successful Response
     */
    200: Array<Invite>;
};

export type GetInvitesApiV1UserInviteGetResponse = GetInvitesApiV1UserInviteGetResponses[keyof GetInvitesApiV1UserInviteGetResponses];

export type CreateInviteApiV1UserInvitePostData = {
    body: InviteCreate;
    path?: never;
    query?: never;
    url: '/api/v1/user/invite';
};

export type CreateInviteApiV1UserInvitePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateInviteApiV1UserInvitePostError = CreateInviteApiV1UserInvitePostErrors[keyof CreateInviteApiV1UserInvitePostErrors];

export type CreateInviteApiV1UserInvitePostResponses = {
    /**
     * Successful Response
     */
    200: Invite;
};

export type CreateInviteApiV1UserInvitePostResponse = CreateInviteApiV1UserInvitePostResponses[keyof CreateInviteApiV1UserInvitePostResponses];

export type CreateApiV1ExtensionPostData = {
    body: ExtensionCreate;
    path?: never;
    query?: never;
    url: '/api/v1/extension/';
};

export type CreateApiV1ExtensionPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateApiV1ExtensionPostError = CreateApiV1ExtensionPostErrors[keyof CreateApiV1ExtensionPostErrors];

export type CreateApiV1ExtensionPostResponses = {
    /**
     * Successful Response
     */
    201: ExtensionBase;
};

export type CreateApiV1ExtensionPostResponse = CreateApiV1ExtensionPostResponses[keyof CreateApiV1ExtensionPostResponses];

export type DeleteApiV1ExtensionExtensionDeleteData = {
    body?: never;
    path: {
        /**
         * Extension
         */
        extension: string;
    };
    query?: never;
    url: '/api/v1/extension/{extension}';
};

export type DeleteApiV1ExtensionExtensionDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteApiV1ExtensionExtensionDeleteError = DeleteApiV1ExtensionExtensionDeleteErrors[keyof DeleteApiV1ExtensionExtensionDeleteErrors];

export type DeleteApiV1ExtensionExtensionDeleteResponses = {
    /**
     * Successful Response
     */
    204: void;
};

export type DeleteApiV1ExtensionExtensionDeleteResponse = DeleteApiV1ExtensionExtensionDeleteResponses[keyof DeleteApiV1ExtensionExtensionDeleteResponses];

export type UpdateApiV1ExtensionExtensionPatchData = {
    body: ExtensionUpdate;
    path: {
        /**
         * Extension
         */
        extension: string;
    };
    query?: never;
    url: '/api/v1/extension/{extension}';
};

export type UpdateApiV1ExtensionExtensionPatchErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateApiV1ExtensionExtensionPatchError = UpdateApiV1ExtensionExtensionPatchErrors[keyof UpdateApiV1ExtensionExtensionPatchErrors];

export type UpdateApiV1ExtensionExtensionPatchResponses = {
    /**
     * Successful Response
     */
    200: ExtensionBase;
};

export type UpdateApiV1ExtensionExtensionPatchResponse = UpdateApiV1ExtensionExtensionPatchResponses[keyof UpdateApiV1ExtensionExtensionPatchResponses];

export type GetApiV1ExtensionInfoExtensionGetData = {
    body?: never;
    path: {
        /**
         * Extension
         */
        extension: string;
    };
    query?: never;
    url: '/api/v1/extension/info/{extension}';
};

export type GetApiV1ExtensionInfoExtensionGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetApiV1ExtensionInfoExtensionGetError = GetApiV1ExtensionInfoExtensionGetErrors[keyof GetApiV1ExtensionInfoExtensionGetErrors];

export type GetApiV1ExtensionInfoExtensionGetResponses = {
    /**
     * Successful Response
     */
    200: Extension;
};

export type GetApiV1ExtensionInfoExtensionGetResponse = GetApiV1ExtensionInfoExtensionGetResponses[keyof GetApiV1ExtensionInfoExtensionGetResponses];

export type GetOwnApiV1ExtensionOwnGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/extension/own';
};

export type GetOwnApiV1ExtensionOwnGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type PhonebookApiV1ExtensionPhonebookGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Query
         */
        query?: string | null;
        /**
         * Public
         */
        public?: boolean;
    };
    url: '/api/v1/extension/phonebook';
};

export type PhonebookApiV1ExtensionPhonebookGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PhonebookApiV1ExtensionPhonebookGetError = PhonebookApiV1ExtensionPhonebookGetErrors[keyof PhonebookApiV1ExtensionPhonebookGetErrors];

export type PhonebookApiV1ExtensionPhonebookGetResponses = {
    /**
     * Response Phonebook Api V1 Extension Phonebook Get
     * Successful Response
     */
    200: Array<ExtensionBase>;
};

export type PhonebookApiV1ExtensionPhonebookGetResponse = PhonebookApiV1ExtensionPhonebookGetResponses[keyof PhonebookApiV1ExtensionPhonebookGetResponses];

export type AdminPhonebookApiV1ExtensionAllGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Query
         */
        query?: string | null;
        /**
         * Public
         */
        public?: boolean;
    };
    url: '/api/v1/extension/all';
};

export type AdminPhonebookApiV1ExtensionAllGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AdminPhonebookApiV1ExtensionAllGetError = AdminPhonebookApiV1ExtensionAllGetErrors[keyof AdminPhonebookApiV1ExtensionAllGetErrors];

export type AdminPhonebookApiV1ExtensionAllGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetExtensionsOnlineApiV1ExtensionOnlineGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/extension/online';
};

export type GetExtensionsOnlineApiV1ExtensionOnlineGetResponses = {
    /**
     * Response Get Extensions Online Api V1 Extension Online Get
     * Successful Response
     */
    200: Array<ExtensionBase>;
};

export type GetExtensionsOnlineApiV1ExtensionOnlineGetResponse = GetExtensionsOnlineApiV1ExtensionOnlineGetResponses[keyof GetExtensionsOnlineApiV1ExtensionOnlineGetResponses];

export type IsExtensionOnlineApiV1ExtensionIsOnlineExtensionGetData = {
    body?: never;
    path: {
        /**
         * Extension
         */
        extension: string;
    };
    query?: never;
    url: '/api/v1/extension/is_online/{extension}';
};

export type IsExtensionOnlineApiV1ExtensionIsOnlineExtensionGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type IsExtensionOnlineApiV1ExtensionIsOnlineExtensionGetError = IsExtensionOnlineApiV1ExtensionIsOnlineExtensionGetErrors[keyof IsExtensionOnlineApiV1ExtensionIsOnlineExtensionGetErrors];

export type IsExtensionOnlineApiV1ExtensionIsOnlineExtensionGetResponses = {
    /**
     * Response Is Extension Online Api V1 Extension Is Online  Extension  Get
     * Successful Response
     */
    200: {
        [key: string]: boolean;
    };
};

export type IsExtensionOnlineApiV1ExtensionIsOnlineExtensionGetResponse = IsExtensionOnlineApiV1ExtensionIsOnlineExtensionGetResponses[keyof IsExtensionOnlineApiV1ExtensionIsOnlineExtensionGetResponses];

export type GetExtensionContactApiV1ExtensionContactExtensionGetData = {
    body?: never;
    path: {
        /**
         * Extension
         */
        extension: string;
    };
    query?: never;
    url: '/api/v1/extension/contact/{extension}';
};

export type GetExtensionContactApiV1ExtensionContactExtensionGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetExtensionContactApiV1ExtensionContactExtensionGetError = GetExtensionContactApiV1ExtensionContactExtensionGetErrors[keyof GetExtensionContactApiV1ExtensionContactExtensionGetErrors];

export type GetExtensionContactApiV1ExtensionContactExtensionGetResponses = {
    /**
     * Response Get Extension Contact Api V1 Extension Contact  Extension  Get
     * Successful Response
     */
    200: PsContact | null;
};

export type GetExtensionContactApiV1ExtensionContactExtensionGetResponse = GetExtensionContactApiV1ExtensionContactExtensionGetResponses[keyof GetExtensionContactApiV1ExtensionContactExtensionGetResponses];

export type GetSettingsApiV1SettingsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/settings/';
};

export type GetSettingsApiV1SettingsGetResponses = {
    /**
     * Successful Response
     */
    200: PublicSettings;
};

export type GetSettingsApiV1SettingsGetResponse = GetSettingsApiV1SettingsGetResponses[keyof GetSettingsApiV1SettingsGetResponses];

export type GetPhoneTypesApiV1TelephoningTypesGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/telephoning/types';
};

export type GetPhoneTypesApiV1TelephoningTypesGetResponses = {
    /**
     * Response Get Phone Types Api V1 Telephoning Types Get
     * Successful Response
     */
    200: Array<PhoneType>;
};

export type GetPhoneTypesApiV1TelephoningTypesGetResponse = GetPhoneTypesApiV1TelephoningTypesGetResponses[keyof GetPhoneTypesApiV1TelephoningTypesGetResponses];

export type DeleteWebsipApiV1TelephoningWebsipDeleteData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Extension
         */
        extension: string;
        /**
         * Password
         */
        password: string;
    };
    url: '/api/v1/telephoning/websip';
};

export type DeleteWebsipApiV1TelephoningWebsipDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteWebsipApiV1TelephoningWebsipDeleteError = DeleteWebsipApiV1TelephoningWebsipDeleteErrors[keyof DeleteWebsipApiV1TelephoningWebsipDeleteErrors];

export type DeleteWebsipApiV1TelephoningWebsipDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type CreateWebsipApiV1TelephoningWebsipGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/telephoning/websip';
};

export type CreateWebsipApiV1TelephoningWebsipGetResponses = {
    /**
     * Successful Response
     */
    200: WebSipExtension;
};

export type CreateWebsipApiV1TelephoningWebsipGetResponse = CreateWebsipApiV1TelephoningWebsipGetResponses[keyof CreateWebsipApiV1TelephoningWebsipGetResponses];

export type PutWebsipApiV1TelephoningWebsipPutData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Extension
         */
        extension: string;
    };
    url: '/api/v1/telephoning/websip';
};

export type PutWebsipApiV1TelephoningWebsipPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PutWebsipApiV1TelephoningWebsipPutError = PutWebsipApiV1TelephoningWebsipPutErrors[keyof PutWebsipApiV1TelephoningWebsipPutErrors];

export type PutWebsipApiV1TelephoningWebsipPutResponses = {
    /**
     * Successful Response
     */
    204: void;
};

export type PutWebsipApiV1TelephoningWebsipPutResponse = PutWebsipApiV1TelephoningWebsipPutResponses[keyof PutWebsipApiV1TelephoningWebsipPutResponses];

export type GetDialplanApplicationSchemasApiV1TelephoningDialplanSchemasGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/telephoning/dialplan/schemas';
};

export type GetDialplanApplicationSchemasApiV1TelephoningDialplanSchemasGetResponses = {
    /**
     * Response Get Dialplan Application Schemas Api V1 Telephoning Dialplan Schemas Get
     * Successful Response
     */
    200: {
        [key: string]: {
            [key: string]: unknown;
        };
    };
};

export type GetDialplanApplicationSchemasApiV1TelephoningDialplanSchemasGetResponse = GetDialplanApplicationSchemasApiV1TelephoningDialplanSchemasGetResponses[keyof GetDialplanApplicationSchemasApiV1TelephoningDialplanSchemasGetResponses];

export type GetDialplanApiV1TelephoningDialplanExtenGetData = {
    body?: never;
    path: {
        /**
         * Exten
         */
        exten: string;
    };
    query?: never;
    url: '/api/v1/telephoning/dialplan/{exten}';
};

export type GetDialplanApiV1TelephoningDialplanExtenGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetDialplanApiV1TelephoningDialplanExtenGetError = GetDialplanApiV1TelephoningDialplanExtenGetErrors[keyof GetDialplanApiV1TelephoningDialplanExtenGetErrors];

export type GetDialplanApiV1TelephoningDialplanExtenGetResponses = {
    /**
     * Response Get Dialplan Api V1 Telephoning Dialplan  Exten  Get
     * Successful Response
     */
    200: Dialplan | null;
};

export type GetDialplanApiV1TelephoningDialplanExtenGetResponse = GetDialplanApiV1TelephoningDialplanExtenGetResponses[keyof GetDialplanApiV1TelephoningDialplanExtenGetResponses];

export type GetDialplanExtensionsApiV1TelephoningDialplansGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/telephoning/dialplans';
};

export type GetDialplanExtensionsApiV1TelephoningDialplansGetResponses = {
    /**
     * Response Get Dialplan Extensions Api V1 Telephoning Dialplans Get
     * Successful Response
     */
    200: Array<string>;
};

export type GetDialplanExtensionsApiV1TelephoningDialplansGetResponse = GetDialplanExtensionsApiV1TelephoningDialplansGetResponses[keyof GetDialplanExtensionsApiV1TelephoningDialplansGetResponses];

export type GetPagesApiV1PagesGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/pages/';
};

export type GetPagesApiV1PagesGetResponses = {
    /**
     * Response Get Pages Api V1 Pages  Get
     * Successful Response
     */
    200: {
        [key: string]: string;
    };
};

export type GetPagesApiV1PagesGetResponse = GetPagesApiV1PagesGetResponses[keyof GetPagesApiV1PagesGetResponses];

export type RevokeOutgoingPeeringRequestApiV1FederationOutgoingRequestDeleteData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Request Id
         */
        request_id: string;
        /**
         * Local Only
         */
        local_only?: boolean;
    };
    url: '/api/v1/federation/outgoing/request';
};

export type RevokeOutgoingPeeringRequestApiV1FederationOutgoingRequestDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RevokeOutgoingPeeringRequestApiV1FederationOutgoingRequestDeleteError = RevokeOutgoingPeeringRequestApiV1FederationOutgoingRequestDeleteErrors[keyof RevokeOutgoingPeeringRequestApiV1FederationOutgoingRequestDeleteErrors];

export type RevokeOutgoingPeeringRequestApiV1FederationOutgoingRequestDeleteResponses = {
    /**
     * Successful Response
     */
    204: void;
};

export type RevokeOutgoingPeeringRequestApiV1FederationOutgoingRequestDeleteResponse = RevokeOutgoingPeeringRequestApiV1FederationOutgoingRequestDeleteResponses[keyof RevokeOutgoingPeeringRequestApiV1FederationOutgoingRequestDeleteResponses];

export type CreateOutgoingPeeringRequestApiV1FederationOutgoingRequestPostData = {
    body: OutgoingPeeringRequestBase;
    path?: never;
    query?: never;
    url: '/api/v1/federation/outgoing/request';
};

export type CreateOutgoingPeeringRequestApiV1FederationOutgoingRequestPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateOutgoingPeeringRequestApiV1FederationOutgoingRequestPostError = CreateOutgoingPeeringRequestApiV1FederationOutgoingRequestPostErrors[keyof CreateOutgoingPeeringRequestApiV1FederationOutgoingRequestPostErrors];

export type CreateOutgoingPeeringRequestApiV1FederationOutgoingRequestPostResponses = {
    /**
     * Successful Response
     */
    200: OutgoingPeeringRequestBase;
};

export type CreateOutgoingPeeringRequestApiV1FederationOutgoingRequestPostResponse = CreateOutgoingPeeringRequestApiV1FederationOutgoingRequestPostResponses[keyof CreateOutgoingPeeringRequestApiV1FederationOutgoingRequestPostResponses];

export type GetOutgoingPeeringRequestsApiV1FederationOutgoingRequestsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/federation/outgoing/requests';
};

export type GetOutgoingPeeringRequestsApiV1FederationOutgoingRequestsGetResponses = {
    /**
     * Response Get Outgoing Peering Requests Api V1 Federation Outgoing Requests Get
     * Successful Response
     */
    200: Array<OutgoingPeeringRequestPublic>;
};

export type GetOutgoingPeeringRequestsApiV1FederationOutgoingRequestsGetResponse = GetOutgoingPeeringRequestsApiV1FederationOutgoingRequestsGetResponses[keyof GetOutgoingPeeringRequestsApiV1FederationOutgoingRequestsGetResponses];

export type GetIncomingPeeringRequestsApiV1FederationIncomingRequestsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/federation/incoming/requests';
};

export type GetIncomingPeeringRequestsApiV1FederationIncomingRequestsGetResponses = {
    /**
     * Response Get Incoming Peering Requests Api V1 Federation Incoming Requests Get
     * Successful Response
     */
    200: Array<IncomingPeeringRequestBase>;
};

export type GetIncomingPeeringRequestsApiV1FederationIncomingRequestsGetResponse = GetIncomingPeeringRequestsApiV1FederationIncomingRequestsGetResponses[keyof GetIncomingPeeringRequestsApiV1FederationIncomingRequestsGetResponses];

export type RevokeIncomingPeeringRequestApiV1FederationIncomingRequestRequestIdDeleteData = {
    body?: never;
    path: {
        /**
         * Request Id
         */
        request_id: string;
    };
    query: {
        /**
         * Secret
         */
        secret: string;
    };
    url: '/api/v1/federation/incoming/request/{request_id}';
};

export type RevokeIncomingPeeringRequestApiV1FederationIncomingRequestRequestIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RevokeIncomingPeeringRequestApiV1FederationIncomingRequestRequestIdDeleteError = RevokeIncomingPeeringRequestApiV1FederationIncomingRequestRequestIdDeleteErrors[keyof RevokeIncomingPeeringRequestApiV1FederationIncomingRequestRequestIdDeleteErrors];

export type RevokeIncomingPeeringRequestApiV1FederationIncomingRequestRequestIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type SetIncomingPeeringRequestStatusApiV1FederationIncomingRequestRequestIdPutData = {
    body: IncomingRequestStatus;
    path: {
        /**
         * Request Id
         */
        request_id: string;
    };
    query?: never;
    url: '/api/v1/federation/incoming/request/{request_id}';
};

export type SetIncomingPeeringRequestStatusApiV1FederationIncomingRequestRequestIdPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type SetIncomingPeeringRequestStatusApiV1FederationIncomingRequestRequestIdPutError = SetIncomingPeeringRequestStatusApiV1FederationIncomingRequestRequestIdPutErrors[keyof SetIncomingPeeringRequestStatusApiV1FederationIncomingRequestRequestIdPutErrors];

export type SetIncomingPeeringRequestStatusApiV1FederationIncomingRequestRequestIdPutResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type CreateIncomingPeeringRequestApiV1FederationIncomingRequestPostData = {
    body: IncomingPeeringRequest;
    path?: never;
    query?: never;
    url: '/api/v1/federation/incoming/request';
};

export type CreateIncomingPeeringRequestApiV1FederationIncomingRequestPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateIncomingPeeringRequestApiV1FederationIncomingRequestPostError = CreateIncomingPeeringRequestApiV1FederationIncomingRequestPostErrors[keyof CreateIncomingPeeringRequestApiV1FederationIncomingRequestPostErrors];

export type CreateIncomingPeeringRequestApiV1FederationIncomingRequestPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type SetOutgoingPeeringRequestStatusApiV1FederationOutgoingRequestRequestIdPutData = {
    body: OutgoingRequestStatus;
    path: {
        /**
         * Request Id
         */
        request_id: string;
    };
    query?: never;
    url: '/api/v1/federation/outgoing/request/{request_id}';
};

export type SetOutgoingPeeringRequestStatusApiV1FederationOutgoingRequestRequestIdPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type SetOutgoingPeeringRequestStatusApiV1FederationOutgoingRequestRequestIdPutError = SetOutgoingPeeringRequestStatusApiV1FederationOutgoingRequestRequestIdPutErrors[keyof SetOutgoingPeeringRequestStatusApiV1FederationOutgoingRequestRequestIdPutErrors];

export type SetOutgoingPeeringRequestStatusApiV1FederationOutgoingRequestRequestIdPutResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetPeersApiV1FederationPeersGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/federation/peers';
};

export type GetPeersApiV1FederationPeersGetResponses = {
    /**
     * Response Get Peers Api V1 Federation Peers Get
     * Successful Response
     */
    200: Array<PeerBase>;
};

export type GetPeersApiV1FederationPeersGetResponse = GetPeersApiV1FederationPeersGetResponses[keyof GetPeersApiV1FederationPeersGetResponses];

export type DeletePeerApiV1FederationPeerPeerIdDeleteData = {
    body?: never;
    path: {
        /**
         * Peer Id
         */
        peer_id: string;
    };
    query?: {
        /**
         * Local Only
         */
        local_only?: boolean;
    };
    url: '/api/v1/federation/peer/{peer_id}';
};

export type DeletePeerApiV1FederationPeerPeerIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeletePeerApiV1FederationPeerPeerIdDeleteError = DeletePeerApiV1FederationPeerPeerIdDeleteErrors[keyof DeletePeerApiV1FederationPeerPeerIdDeleteErrors];

export type DeletePeerApiV1FederationPeerPeerIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type TeardownRequestApiV1FederationPeerTeardownPostData = {
    body: PeerTeardownData;
    path?: never;
    query?: never;
    url: '/api/v1/federation/peer/teardown';
};

export type TeardownRequestApiV1FederationPeerTeardownPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type TeardownRequestApiV1FederationPeerTeardownPostError = TeardownRequestApiV1FederationPeerTeardownPostErrors[keyof TeardownRequestApiV1FederationPeerTeardownPostErrors];

export type TeardownRequestApiV1FederationPeerTeardownPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetPeerPhonebooksApiV1FederationPhonebookGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/federation/phonebook';
};

export type GetPeerPhonebooksApiV1FederationPhonebookGetResponses = {
    /**
     * Response Get Peer Phonebooks Api V1 Federation Phonebook Get
     * Successful Response
     */
    200: Array<PeerPhonebook>;
};

export type GetPeerPhonebooksApiV1FederationPhonebookGetResponse = GetPeerPhonebooksApiV1FederationPhonebookGetResponses[keyof GetPeerPhonebooksApiV1FederationPhonebookGetResponses];

export type GetMediaApiV1MediaGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * All Media
         */
        all_media?: boolean;
    };
    url: '/api/v1/media/';
};

export type GetMediaApiV1MediaGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetMediaApiV1MediaGetError = GetMediaApiV1MediaGetErrors[keyof GetMediaApiV1MediaGetErrors];

export type GetMediaApiV1MediaGetResponses = {
    /**
     * Response Get Media Api V1 Media  Get
     * Successful Response
     */
    200: Array<Media>;
};

export type GetMediaApiV1MediaGetResponse = GetMediaApiV1MediaGetResponses[keyof GetMediaApiV1MediaGetResponses];

export type CreateMediaApiV1MediaPostData = {
    body: BodyCreateMediaApiV1MediaPost;
    path?: never;
    query: {
        /**
         * Name
         */
        name: string;
        supposed_type: MediaType;
    };
    url: '/api/v1/media/';
};

export type CreateMediaApiV1MediaPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateMediaApiV1MediaPostError = CreateMediaApiV1MediaPostErrors[keyof CreateMediaApiV1MediaPostErrors];

export type CreateMediaApiV1MediaPostResponses = {
    /**
     * Successful Response
     */
    200: Media;
};

export type CreateMediaApiV1MediaPostResponse = CreateMediaApiV1MediaPostResponses[keyof CreateMediaApiV1MediaPostResponses];

export type DeleteMediaApiV1MediaMediaIdDeleteData = {
    body?: never;
    path: {
        /**
         * Media Id
         */
        media_id: string;
    };
    query?: never;
    url: '/api/v1/media/{media_id}';
};

export type DeleteMediaApiV1MediaMediaIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteMediaApiV1MediaMediaIdDeleteError = DeleteMediaApiV1MediaMediaIdDeleteErrors[keyof DeleteMediaApiV1MediaMediaIdDeleteErrors];

export type DeleteMediaApiV1MediaMediaIdDeleteResponses = {
    /**
     * Successful Response
     */
    204: void;
};

export type DeleteMediaApiV1MediaMediaIdDeleteResponse = DeleteMediaApiV1MediaMediaIdDeleteResponses[keyof DeleteMediaApiV1MediaMediaIdDeleteResponses];

export type UpdateMediaApiV1MediaMediaIdPutData = {
    body: MediaUpdateMeta;
    path: {
        /**
         * Media Id
         */
        media_id: string;
    };
    query?: never;
    url: '/api/v1/media/{media_id}';
};

export type UpdateMediaApiV1MediaMediaIdPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateMediaApiV1MediaMediaIdPutError = UpdateMediaApiV1MediaMediaIdPutErrors[keyof UpdateMediaApiV1MediaMediaIdPutErrors];

export type UpdateMediaApiV1MediaMediaIdPutResponses = {
    /**
     * Successful Response
     */
    200: Media;
};

export type UpdateMediaApiV1MediaMediaIdPutResponse = UpdateMediaApiV1MediaMediaIdPutResponses[keyof UpdateMediaApiV1MediaMediaIdPutResponses];

export type GetMediaContentApiV1MediaByidMediaIdExtGetData = {
    body?: never;
    path: {
        /**
         * Media Id
         */
        media_id: string;
        /**
         * Ext
         */
        ext: string | null;
    };
    query?: never;
    url: '/api/v1/media/byid/{media_id}.{ext}';
};

export type GetMediaContentApiV1MediaByidMediaIdExtGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetMediaContentApiV1MediaByidMediaIdExtGetError = GetMediaContentApiV1MediaByidMediaIdExtGetErrors[keyof GetMediaContentApiV1MediaByidMediaIdExtGetErrors];

export type GetMediaContentApiV1MediaByidMediaIdExtGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetMediaContentApiV1MediaByidMediaIdGetData = {
    body?: never;
    path: {
        /**
         * Media Id
         */
        media_id: string;
    };
    query?: {
        /**
         * Ext
         */
        ext?: string | null;
    };
    url: '/api/v1/media/byid/{media_id}';
};

export type GetMediaContentApiV1MediaByidMediaIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetMediaContentApiV1MediaByidMediaIdGetError = GetMediaContentApiV1MediaByidMediaIdGetErrors[keyof GetMediaContentApiV1MediaByidMediaIdGetErrors];

export type GetMediaContentApiV1MediaByidMediaIdGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetMediaByNameApiV1MediaByextensionExtensionIdQueryGetData = {
    body?: never;
    path: {
        /**
         * Extension Id
         */
        extension_id: string;
        /**
         * Query
         */
        query: string;
    };
    query?: never;
    url: '/api/v1/media/byextension/{extension_id}/{query}';
};

export type GetMediaByNameApiV1MediaByextensionExtensionIdQueryGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetMediaByNameApiV1MediaByextensionExtensionIdQueryGetError = GetMediaByNameApiV1MediaByextensionExtensionIdQueryGetErrors[keyof GetMediaByNameApiV1MediaByextensionExtensionIdQueryGetErrors];

export type GetMediaByNameApiV1MediaByextensionExtensionIdQueryGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type IndexGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/';
};

export type IndexGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetUpdateTelephoningInnovaphoneUpdateGetData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Mac
         */
        mac: string;
        /**
         * Localip
         */
        localip: string;
    };
    url: '/telephoning/innovaphone/update';
};

export type GetUpdateTelephoningInnovaphoneUpdateGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetUpdateTelephoningInnovaphoneUpdateGetError = GetUpdateTelephoningInnovaphoneUpdateGetErrors[keyof GetUpdateTelephoningInnovaphoneUpdateGetErrors];

export type GetUpdateTelephoningInnovaphoneUpdateGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetConfigTelephoningInnovaphoneConfigGetData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Mac
         */
        mac: string;
    };
    url: '/telephoning/innovaphone/config';
};

export type GetConfigTelephoningInnovaphoneConfigGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetConfigTelephoningInnovaphoneConfigGetError = GetConfigTelephoningInnovaphoneConfigGetErrors[keyof GetConfigTelephoningInnovaphoneConfigGetErrors];

export type GetConfigTelephoningInnovaphoneConfigGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetServiceDiscoveryTelephoningInnovaphoneServiceDiscoveryGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/telephoning/innovaphone/service-discovery';
};

export type GetServiceDiscoveryTelephoningInnovaphoneServiceDiscoveryGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetSipCredentialsTelephoningIotSecretGetData = {
    body?: never;
    path: {
        /**
         * Secret
         */
        secret: string;
    };
    query?: {
        /**
         * Format
         */
        format?: 'json' | 'csv' | 'xml';
    };
    url: '/telephoning/iot/{secret}';
};

export type GetSipCredentialsTelephoningIotSecretGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetSipCredentialsTelephoningIotSecretGetError = GetSipCredentialsTelephoningIotSecretGetErrors[keyof GetSipCredentialsTelephoningIotSecretGetErrors];

export type GetSipCredentialsTelephoningIotSecretGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetConfigTelephoningSnomSnomMacGetData = {
    body?: never;
    path: {
        /**
         * Mac
         */
        mac: string;
    };
    query?: never;
    url: '/telephoning/snom/snom-{mac}';
};

export type GetConfigTelephoningSnomSnomMacGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetConfigTelephoningSnomSnomMacGetError = GetConfigTelephoningSnomSnomMacGetErrors[keyof GetConfigTelephoningSnomSnomMacGetErrors];

export type GetConfigTelephoningSnomSnomMacGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ClientOptions = {
    baseUrl: 'http://localhost:8000' | (string & {});
};